name: Load Tests

on:
  workflow_dispatch:
    inputs:
      service_type:
        description: 'Service type to test (h1-h1, h1c-h1, h1-h1c, h1c-h1c, or all)'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - h1-h1
        - h1c-h1
        - h1-h1c
        - h1c-h1c
      payload_sizes:
        description: 'Payload sizes to test (comma-separated: 1KB,5KB,10KB,100KB,500KB,1MB)'
        required: false
        default: '10KB,100KB,1MB'
      user_counts:
        description: 'User counts to test (comma-separated: 50,100,500)'
        required: false
        default: '50,100'
      test_duration:
        description: 'Test duration in seconds'
        required: false
        default: '300'
        type: number

jobs:
  validate-setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Ballerina
      uses: ballerina-platform/setup-ballerina@v1
      with:
        version: 2201.12.8
    
    - name: Install JMeter
      run: |
        wget -q https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz
        tar -xzf apache-jmeter-5.6.3.tgz
        sudo mv apache-jmeter-5.6.3 /opt/apache-jmeter
        echo "/opt/apache-jmeter/bin" >> $GITHUB_PATH
        jmeter -v
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Cache Ballerina dependencies
      uses: actions/cache@v3
      with:
        path: ~/.ballerina
        key: ${{ runner.os }}-ballerina-${{ hashFiles('**/Ballerina.toml') }}
        restore-keys: ${{ runner.os }}-ballerina
    
    - name: Validate setup
      run: |
        chmod +x scripts/validate_setup.sh
        scripts/validate_setup.sh

  build-projects:
    needs: validate-setup
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Ballerina
      uses: ballerina-platform/setup-ballerina@v1
      with:
        version: 2201.12.8
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Cache Ballerina dependencies
      uses: actions/cache@v3
      with:
        path: ~/.ballerina
        key: ${{ runner.os }}-ballerina-${{ hashFiles('**/Ballerina.toml') }}
        restore-keys: ${{ runner.os }}-ballerina
    
    - name: Build Netty backend
      run: |
        cd netty-backend
        mvn clean package -q
        ls -la target/
    
    - name: Build Ballerina project
      run: |
        cd ballerina-passthrough
        bal build
        ls -la target/bin/
    
    - name: Generate test samples
      run: |
        chmod +x scripts/generate_samples.sh
        scripts/generate_samples.sh
    
    - name: Set up test matrix
      id: set-matrix
      run: |
        # Parse workflow inputs or use defaults
        SERVICE_TYPE="${{ github.event.inputs.service_type || 'h1-h1,h1c-h1c' }}"
        PAYLOAD_SIZES="${{ github.event.inputs.payload_sizes || '1KB,5KB' }}"
        USER_COUNTS="${{ github.event.inputs.user_counts || '50,100' }}"
        
        # Convert service types
        if [ "$SERVICE_TYPE" = "all" ]; then
          SERVICES="[\"h1-h1\", \"h1c-h1\", \"h1-h1c\", \"h1c-h1c\"]"
        else
          SERVICES="[$(echo "$SERVICE_TYPE" | sed 's/,/", "/g' | sed 's/^/"/; s/$/"/')]"
        fi
        
        # Convert payload sizes
        PAYLOADS="[$(echo "$PAYLOAD_SIZES" | sed 's/,/", "/g' | sed 's/^/"/; s/$/"/')]"
        
        # Convert user counts
        USERS="[$(echo "$USER_COUNTS" | sed 's/,/, /g')]"
        
        # Create matrix JSON
        MATRIX="{\"service\": $SERVICES, \"payload\": $PAYLOADS, \"users\": $USERS}"
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        echo "Generated matrix: $MATRIX"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          netty-backend/target/netty-http-echo-service.jar
          ballerina-passthrough/target/bin/ballerina_passthrough.jar
          samples/
        retention-days: 1

  load-tests:
    needs: build-projects
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.build-projects.outputs.matrix) }}
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Ballerina
      uses: ballerina-platform/setup-ballerina@v1
      with:
        version: 2201.12.8
    
    - name: Install JMeter
      run: |
        wget -q https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz
        tar -xzf apache-jmeter-5.6.3.tgz
        sudo mv apache-jmeter-5.6.3 /opt/apache-jmeter
        echo "/opt/apache-jmeter/bin" >> $GITHUB_PATH
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
    
    - name: Restore file permissions
      run: |
        chmod +x scripts/*.sh
        chmod +x netty-backend/target/netty-http-echo-service.jar
        chmod +x ballerina-passthrough/target/bin/ballerina_passthrough.jar
    
    - name: Create results directory
      run: mkdir -p results reports
    
    - name: Run load test for ${{ matrix.service }}-${{ matrix.payload }}-${{ matrix.users }}users
      run: |
        TEST_DURATION="${{ github.event.inputs.test_duration || '180' }}"
        
        # Export test parameters
        export SERVICE="${{ matrix.service }}"
        export PAYLOAD_SIZE="${{ matrix.payload }}"
        export USERS="${{ matrix.users }}"
        export DURATION="$TEST_DURATION"
        
        echo "Running load test for service: $SERVICE, payload: $PAYLOAD_SIZE, users: $USERS, duration: ${DURATION}s"
        
        # Run the quick test script
        scripts/quick_test.sh "$SERVICE" "$PAYLOAD_SIZE" "$USERS" "$DURATION"
      timeout-minutes: 15
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.service }}-${{ matrix.payload }}-${{ matrix.users }}users
        path: |
          quick_results/
          results/
        retention-days: 30

  generate-report:
    needs: [build-projects, load-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-results/
        pattern: test-results-*
    
    - name: Generate consolidated report
      run: |
        mkdir -p consolidated-report
        
        # Create report header
        cat << 'EOF' > consolidated-report/load-test-report.md
        # Load Test Results Report
        
        **Test Run Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
        **Commit**: ${{ github.sha }}  
        **Branch**: ${{ github.ref_name }}  
        **Trigger**: ${{ github.event_name }}
        
        ## Test Summary
        
        EOF
        
        # Process each result directory
        echo "| Service | Payload | Users | Status | Results File |" >> consolidated-report/load-test-report.md
        echo "|---------|---------|-------|---------|--------------|" >> consolidated-report/load-test-report.md
        
        for result_dir in all-results/test-results-*/; do
          if [ -d "$result_dir" ]; then
            # Extract test parameters from directory name
            dirname=$(basename "$result_dir")
            service=$(echo "$dirname" | sed 's/test-results-//' | sed 's/-[^-]*-[^-]*$//')
            remaining=$(echo "$dirname" | sed "s/test-results-$service-//")
            payload=$(echo "$remaining" | sed 's/-[^-]*$//')
            users=$(echo "$remaining" | sed "s/$payload-//")
            
            # Check if results exist
            if ls "$result_dir"/quick_results/*.jtl >/dev/null 2>&1; then
              status="✅ Completed"
              result_file=$(ls "$result_dir"/quick_results/*.jtl | head -1 | xargs basename)
            else
              status="❌ Failed"
              result_file="N/A"
            fi
            
            echo "| $service | $payload | $users | $status | $result_file |" >> consolidated-report/load-test-report.md
          fi
        done
        
        # Add detailed results section
        cat << 'EOF' >> consolidated-report/load-test-report.md
        
        ## Detailed Results
        
        The following sections contain detailed metrics for each test run:
        
        EOF
        
        # Process JTL files for basic statistics
        for result_dir in all-results/test-results-*/; do
          if [ -d "$result_dir" ] && ls "$result_dir"/quick_results/*.jtl >/dev/null 2>&1; then
            dirname=$(basename "$result_dir")
            service=$(echo "$dirname" | sed 's/test-results-//' | sed 's/-[^-]*-[^-]*$//')
            remaining=$(echo "$dirname" | sed "s/test-results-$service-//")
            payload=$(echo "$remaining" | sed 's/-[^-]*$//')
            users=$(echo "$remaining" | sed "s/$payload-//")
            
            jtl_file=$(ls "$result_dir"/quick_results/*.jtl | head -1)
            
            if [ -f "$jtl_file" ]; then
              echo "### $service - $payload - $users" >> consolidated-report/load-test-report.md
              echo "" >> consolidated-report/load-test-report.md
              
              # Basic statistics from JTL file
              total_samples=$(tail -n +2 "$jtl_file" | wc -l)
              if [ "$total_samples" -gt 0 ]; then
                avg_response_time=$(tail -n +2 "$jtl_file" | cut -d',' -f2 | awk '{sum+=$1} END {printf "%.2f", sum/NR}')
                success_count=$(tail -n +2 "$jtl_file" | cut -d',' -f8 | grep -c "true" || echo "0")
                success_rate=$(echo "$success_count $total_samples" | awk '{printf "%.2f", ($1/$2)*100}')
                
                echo "- **Total Samples**: $total_samples" >> consolidated-report/load-test-report.md
                echo "- **Average Response Time**: ${avg_response_time}ms" >> consolidated-report/load-test-report.md
                echo "- **Success Rate**: ${success_rate}%" >> consolidated-report/load-test-report.md
                echo "" >> consolidated-report/load-test-report.md
              else
                echo "- **Status**: No samples recorded" >> consolidated-report/load-test-report.md
                echo "" >> consolidated-report/load-test-report.md
              fi
            fi
          fi
        done
        
        # Copy all results to consolidated report
        cp -r all-results/* consolidated-report/ 2>/dev/null || true
    
    - name: Upload consolidated report
      uses: actions/upload-artifact@v4
      with:
        name: load-test-report
        path: consolidated-report/
        retention-days: 90
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('consolidated-report/load-test-report.md')) {
            const report = fs.readFileSync('consolidated-report/load-test-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }

  cleanup:
    needs: [load-tests, generate-report]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Cleanup workspace
      run: |
        # Remove any remaining processes
        pkill -f "ballerina" || true
        pkill -f "netty" || true
        pkill -f "java.*jar" || true
        
        echo "Cleanup completed"